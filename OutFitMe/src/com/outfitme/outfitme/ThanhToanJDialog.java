/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.outfitme.outfitme;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.outfitme.dao.ThanhToanDAO;
import com.outfitme.dao.KhachHangDAO;
import com.outfitme.dao.LichSuMuaHangDAO;
import com.outfitme.dao.NhanVienDAO;
import com.outfitme.dao.SanPhamDAO;
import com.outfitme.entity.ThanhToan;
import com.outfitme.entity.KhachHang;
import com.outfitme.entity.LichSuMuaHang;
import com.outfitme.entity.SanPham;
import com.outfitme.utils.Auth;
import com.outfitme.utils.MsgBox;
import com.outfitme.utils.XJdbc;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class ThanhToanJDialog extends javax.swing.JDialog {

    private ThanhToanDAO cthdDao = new ThanhToanDAO();
    private KhachHangDAO khDao = new KhachHangDAO();
    private LichSuMuaHangDAO lsmhDao = new LichSuMuaHangDAO();

    /**
     * Creates new form ChiTietHoaDon1JDialog
     */
    public ThanhToanJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        fillCustomerComboBox();
        calculateTotalPrice();
        fillTableSLSP();
        setLocationRelativeTo(null);

        cboDSKhachHang.addItemListener(new java.awt.event.ItemListener() {
            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                    filterTableByMaKH();
                    calculateTotalPrice();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        buttonGroup9 = new javax.swing.ButtonGroup();
        buttonGroup10 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        tblChiTietHoaDon = new javax.swing.JScrollPane();
        tblThanhToan = new javax.swing.JTable();
        btnSoHD = new javax.swing.JButton();
        txtSoHD = new javax.swing.JTextField();
        lblHoaDon = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnXoa = new javax.swing.JButton();
        btnThanhToan = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTongTien = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        rdo5 = new javax.swing.JRadioButton();
        rdo10 = new javax.swing.JRadioButton();
        rdo15 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnKiemTraDiem = new javax.swing.JButton();
        cboDSKhachHang = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Thông tin", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        tblThanhToan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "SoHD", "Ngày lập HD", "MaSP", "Tên sản phẩm", "Size", "Số lượng", "Giá tiền", "Tổng tiền", "Nhân viên lập HD", "MaKH"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblThanhToan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblThanhToanMouseClicked(evt);
            }
        });
        tblChiTietHoaDon.setViewportView(tblThanhToan);

        btnSoHD.setBackground(new java.awt.Color(255, 51, 255));
        btnSoHD.setForeground(new java.awt.Color(255, 255, 255));
        btnSoHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/research.png"))); // NOI18N
        btnSoHD.setText("Tìm theo HĐ");
        btnSoHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSoHDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSoHD)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tblChiTietHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSoHD)
                    .addComponent(txtSoHD, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tblChiTietHoaDon, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
        );

        lblHoaDon.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblHoaDon.setText("Thanh Toán");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Thanh Toán", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/icon_xoa.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnThanhToan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/icon_thanhtoan.png"))); // NOI18N
        btnThanhToan.setText("Thanh Toán");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Tổng Tiền");

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setText("Tiền mặt");

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setText("Chuyển khoản");

        buttonGroup1.add(rdo5);
        rdo5.setText("5%");
        rdo5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdo5ActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdo10);
        rdo10.setText("10%");
        rdo10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdo10ActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdo15);
        rdo15.setText("15%");
        rdo15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdo15ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Giảm giá");

        jLabel3.setText("THÀNH VIÊN BẠC");

        jLabel4.setText("THÀNH VIÊN VÀNG");

        jLabel5.setText("THÀNH VIÊN KIM CƯƠNG");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdo5)
                            .addComponent(rdo15)
                            .addComponent(rdo10))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton2))
                            .addComponent(jLabel1)
                            .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnXoa)
                        .addGap(24, 24, 24)
                        .addComponent(btnThanhToan))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdo5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(rdo10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdo15)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btnKiemTraDiem.setBackground(new java.awt.Color(51, 255, 255));
        btnKiemTraDiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/icon_check.png"))); // NOI18N
        btnKiemTraDiem.setText("Kiểm tra điểm");
        btnKiemTraDiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKiemTraDiemActionPerformed(evt);
            }
        });

        cboDSKhachHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDSKhachHangActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Tích Điểm");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Khách Hàng");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)
                                .addGap(0, 74, Short.MAX_VALUE))
                            .addComponent(cboDSKhachHang, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(lblHoaDon)))
                            .addComponent(btnKiemTraDiem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHoaDon)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboDSKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnKiemTraDiem))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        this.ThanhToan();
    }//GEN-LAST:event_btnThanhToanActionPerformed

    private void rdo10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdo10ActionPerformed
        int selectedIndex = cboDSKhachHang.getSelectedIndex();
        if (selectedIndex >= 0) {
            String selectedCustomer = (String) cboDSKhachHang.getSelectedItem();
            String maKH = selectedCustomer.split(" - ")[0];
            KhachHang kh = khDao.selectById(maKH);

            if (kh != null) {
                int currentPoints = kh.getDiem();
                if (currentPoints >= 1000) {
                    discountPercentage = 10.0;
                    updateTotalPriceWithDiscount();
                } else {
                    rdo10.setSelected(false);
                    discountPercentage = 0.0;
                    updateTotalPriceWithDiscount();
                    javax.swing.JOptionPane.showMessageDialog(this, "Bạn chưa đủ điểm! Cần ít nhất 1000 điểm để giảm 10%.");
                }
            } else {
                rdo10.setSelected(false);
                javax.swing.JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng với mã: " + maKH);
            }
        } else {
            rdo10.setSelected(false);
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng trước!");
        }

    }//GEN-LAST:event_rdo10ActionPerformed

    private void rdo5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdo5ActionPerformed
        int selectedIndex = cboDSKhachHang.getSelectedIndex();
        if (selectedIndex >= 0) {
            String selectedCustomer = (String) cboDSKhachHang.getSelectedItem();
            String maKH = selectedCustomer.split(" - ")[0];
            KhachHang kh = khDao.selectById(maKH);

            if (kh != null) {
                int currentPoints = kh.getDiem();
                if (currentPoints >= 500) {
                    discountPercentage = 5.0;
                    updateTotalPriceWithDiscount();
                } else {
                    rdo5.setSelected(false);
                    discountPercentage = 0.0;
                    updateTotalPriceWithDiscount();
                    javax.swing.JOptionPane.showMessageDialog(this, "Bạn chưa đủ điểm! Cần ít nhất 500 điểm để giảm 5%.");
                }
            } else {
                rdo5.setSelected(false);
                javax.swing.JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng với mã: " + maKH);
            }
        } else {
            rdo5.setSelected(false);
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng trước!");
        }
    }//GEN-LAST:event_rdo5ActionPerformed

    private void rdo15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdo15ActionPerformed
        int selectedIndex = cboDSKhachHang.getSelectedIndex();
        if (selectedIndex >= 0) {
            String selectedCustomer = (String) cboDSKhachHang.getSelectedItem();
            String maKH = selectedCustomer.split(" - ")[0];
            KhachHang kh = khDao.selectById(maKH);

            if (kh != null) {
                int currentPoints = kh.getDiem();
                if (currentPoints >= 1500) {
                    discountPercentage = 15.0;
                    updateTotalPriceWithDiscount();
                } else {
                    rdo15.setSelected(false);
                    discountPercentage = 0.0;
                    updateTotalPriceWithDiscount();
                    javax.swing.JOptionPane.showMessageDialog(this, "Bạn chưa đủ điểm! Cần ít nhất 1500 điểm để giảm 15%.");
                }
            } else {
                rdo15.setSelected(false);
                javax.swing.JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng với mã: " + maKH);
            }
        } else {
            rdo15.setSelected(false);
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng trước!");
        }
    }//GEN-LAST:event_rdo15ActionPerformed

    private void btnKiemTraDiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKiemTraDiemActionPerformed
        int selectedIndex = cboDSKhachHang.getSelectedIndex();
        if (selectedIndex >= 0) {
            String selectedCustomer = (String) cboDSKhachHang.getSelectedItem();
            String maKH = selectedCustomer.split(" - ")[0];
            KhachHang kh = khDao.selectById(maKH);
            if (kh != null) {
                int newPoints = calculatePoints(totalPrice);
                int currentPoints = kh.getDiem();
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Khách hàng: " + kh.getTenKH()
                        + "\nĐiểm hiện tại: " + currentPoints
                        + "\nĐiểm tích lũy từ hóa đơn này: " + newPoints
                        + "\nTổng điểm sau khi thanh toán: " + (currentPoints + newPoints));
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng với mã: " + maKH);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng!");
        }

    }//GEN-LAST:event_btnKiemTraDiemActionPerformed

    private void btnSoHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSoHDActionPerformed
        // TODO add your handling code here:
        fillTableSLSP();
    }//GEN-LAST:event_btnSoHDActionPerformed

    private void cboDSKhachHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDSKhachHangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboDSKhachHangActionPerformed

    private void tblThanhToanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblThanhToanMouseClicked
        int row = tblThanhToan.getSelectedRow();
        if (row >= 0) {
            String soHD = tblThanhToan.getValueAt(row, 0).toString();
            txtSoHD.setText(soHD);
        }
    }//GEN-LAST:event_tblThanhToanMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThanhToanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThanhToanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThanhToanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThanhToanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ThanhToanJDialog dialog = new ThanhToanJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKiemTraDiem;
    private javax.swing.JButton btnSoHD;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnXoa;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup10;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.ButtonGroup buttonGroup9;
    private javax.swing.JComboBox<String> cboDSKhachHang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JLabel lblHoaDon;
    private javax.swing.JRadioButton rdo10;
    private javax.swing.JRadioButton rdo15;
    private javax.swing.JRadioButton rdo5;
    private javax.swing.JScrollPane tblChiTietHoaDon;
    private javax.swing.JTable tblThanhToan;
    private javax.swing.JTextField txtSoHD;
    private javax.swing.JTextField txtTongTien;
    // End of variables declaration//GEN-END:variables

    // DAO dùng chung
    ThanhToanDAO dao = new ThanhToanDAO();
    private double totalPrice = 0.0;
    private double discountPercentage = 0.0;

    private void savePurchaseHistory(String maKH) {
        DefaultTableModel model = (DefaultTableModel) tblThanhToan.getModel();
        if (model.getRowCount() == 0) {
            System.out.println("Không có sản phẩm để lưu vào lịch sử mua hàng!");
            return;
        }

        String maNhanVien = null;
        if (model.getRowCount() > 0) {
            Object maNhanVienObj = model.getValueAt(0, 8);
            if (maNhanVienObj != null) {
                maNhanVien = maNhanVienObj.toString();
            }
        }

        if (maNhanVien == null || maNhanVien.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy mã nhân viên trong bảng!");
            return;
        }

        Date thoiGian = new Date();

        for (int i = 0; i < model.getRowCount(); i++) {
            String maSP = (String) model.getValueAt(i, 2);
            String tenSP = (String) model.getValueAt(i, 3);
            int soLuong = (int) model.getValueAt(i, 5);
            double tongTien = (double) model.getValueAt(i, 7);
            String Size = (String) model.getValueAt(i, 4);

            LichSuMuaHang history = new LichSuMuaHang();
            history.setMaKhachHang(maKH);
            history.setThoiGian(thoiGian);
            history.setSanPham(tenSP);
            history.setTongTien(tongTien);
            history.setMaNhanVien(maNhanVien);
            history.setMaSanPham(maSP);
            history.setSoLuong(soLuong);
            history.setSize(Size);

            try {
                lsmhDao.insert(history);
                System.out.println("Đã lưu lịch sử mua hàng: MaKhachHang=" + history.getMaKhachHang()
                        + ", MaSanPham=" + history.getMaSanPham()
                        + ", SoLuong=" + history.getSoLuong());
            } catch (Exception e) {
                System.err.println("Lỗi khi lưu lịch sử mua hàng: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void fillCustomerComboBox() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        List<KhachHang> customers = khDao.selectAll();
        for (KhachHang kh : customers) {
            model.addElement(kh.getMaKH() + " - " + kh.getTenKH());
        }
        cboDSKhachHang.setModel(model);
    }

    public void fillTableSLSP() {
        Object selected = cboDSKhachHang.getSelectedItem();
        if (selected == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một khách hàng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String maKH1 = selected.toString().trim();
        if (maKH1.contains("-")) {
            maKH1 = maKH1.split("-")[0].trim();
        }

        String soHD1 = txtSoHD.getText().trim();
        DefaultTableModel model = (DefaultTableModel) tblThanhToan.getModel();
        model.setRowCount(0);

        try {
            List<Object[]> list = dao.getBysoHD(maKH1, soHD1);
            if (list.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Không tìm thấy hóa đơn nào cho khách hàng " + maKH1
                        + (soHD1.isEmpty() ? "" : " với số hóa đơn " + soHD1) + "!",
                        "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (Object[] row : list) {
                    model.addRow(row);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Lỗi khi tải dữ liệu hóa đơn: " + e.getMessage(),
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

        calculateTotalPrice();
    }

    private void ThanhToan() {
        if (!jRadioButton1.isSelected() && !jRadioButton2.isSelected()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hình thức thanh toán!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc chắn muốn thanh toán hóa đơn này?",
                "Xác nhận thanh toán",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            int selectedIndex = cboDSKhachHang.getSelectedIndex();
            String soHD = txtSoHD.getText().trim();

            if (selectedIndex >= 0 && !soHD.isEmpty()) {
                String selectedCustomer = (String) cboDSKhachHang.getSelectedItem();
                String maKH = selectedCustomer.split(" - ")[0];
                KhachHang kh = khDao.selectById(maKH);

                if (kh != null) {
                    // Tính điểm tích lũy
                    int newPoints = calculatePoints(totalPrice);
                    int currentPoints = kh.getDiem();

                    int pointsToDeduct = 0;
                    if (discountPercentage == 5.0) {
                        pointsToDeduct = 50;
                    } else if (discountPercentage == 10.0) {
                        pointsToDeduct = 100;
                    } else if (discountPercentage == 15.0) {
                        pointsToDeduct = 200;
                    }

                    int updatedPoints = currentPoints + newPoints - pointsToDeduct;
                    if (updatedPoints < 0) {
                        updatedPoints = 0;
                    }
                    kh.setDiem(updatedPoints);
                    khDao.update(kh);

                    // Cập nhật số lượng tồn kho
                    SanPhamDAO spDao = new SanPhamDAO();
                    DefaultTableModel model = (DefaultTableModel) tblThanhToan.getModel();
                    for (int i = 0; i < model.getRowCount(); i++) {
                        String maSP = model.getValueAt(i, 2).toString();
                        int soLuongBan = Integer.parseInt(model.getValueAt(i, 5).toString());
                        SanPham sp = spDao.selectById(maSP);
                        if (sp != null) {
                            int soLuongTonKhoMoi = sp.getSoLuongTonKho() - soLuongBan;
                            if (soLuongTonKhoMoi < 0) {
                                JOptionPane.showMessageDialog(this, "Sản phẩm " + maSP + " không đủ số lượng tồn kho!");
                                return;
                            }
                            sp.setSoLuongTonKho(soLuongTonKhoMoi);
                            spDao.update(sp);
                        }
                    }

                    // Lưu lịch sử mua hàng
                    savePurchaseHistory(maKH);

                    // Xóa hóa đơn
                    cthdDao.deleteBySoHD(soHD);

                    String maNV = Auth.user.getMaNV(); // hoặc nơi bạn lưu mã nhân viên đang đăng nhập
                    String phuongThucTT = jRadioButton1.isSelected() ? "Tiền mặt" : "Chuyển khoản";

                    // Xuất PDF hóa đơn
                    generateInvoicePDF(soHD, maKH, maNV, phuongThucTT);

                    // Load lại bảng
                    filterTableByMaKH();

                    // Reset các giá trị
                    totalPrice = 0.0;
                    discountPercentage = 0.0;
                    rdo5.setSelected(false);
                    rdo10.setSelected(false);
                    rdo15.setSelected(false);
                    updateTotalPriceWithDiscount();
                    jRadioButton1.setSelected(false);
                    jRadioButton2.setSelected(false);
                    txtSoHD.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng và nhập số hóa đơn!");
                }
            }
        }
    }

    private void generateInvoicePDF(String soHD, String maKH, String maNV, String phuongThucTT) {
        DefaultTableModel model = (DefaultTableModel) tblThanhToan.getModel();
        String fileName = "Invoice_" + soHD + ".pdf";

        try {
            // Khởi tạo tài liệu PDF
            Document document = new Document();
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
            document.open();

            // Lấy tên khách hàng và tên nhân viên từ DAO
            KhachHangDAO khachHangDAO = new KhachHangDAO();
            String tenKH = khachHangDAO.getTenKhachHangById(maKH);

            NhanVienDAO nhanVienDAO = new NhanVienDAO();
            String tenNV = nhanVienDAO.getTenNhanVienById(maNV);

            if (tenKH == null || tenNV == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng hoặc nhân viên.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Tải font
            String fontPath = "C:/Windows/Fonts/times.ttf";
            BaseFont baseFont = BaseFont.createFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
            Font font = new Font(baseFont, 12);
            Font boldFont = new Font(baseFont, 16, Font.BOLD);

            // Tiêu đề và thông tin chung
            document.add(new Paragraph("HÓA ĐƠN BÁN HÀNG", boldFont));
            document.add(new Paragraph("Hóa đơn số: " + soHD, font));
            document.add(new Paragraph("Ngày lập: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date()), font));
            document.add(new Paragraph("Mã khách hàng: " + maKH, font));
            document.add(new Paragraph("Tên khách hàng: " + tenKH, font));
            document.add(new Paragraph("Mã nhân viên: " + maNV, font));
            document.add(new Paragraph("Tên nhân viên: " + tenNV, font));
            document.add(new Paragraph("Phương thức thanh toán: " + phuongThucTT, font)); // ← Thêm dòng này
            document.add(new Paragraph(" ")); // dòng trống

            // Bảng sản phẩm
            PdfPTable table = new PdfPTable(5);
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);
            table.setWidths(new float[]{1f, 4f, 2f, 2f, 2.5f});

            // Thêm tiêu đề cột
            table.addCell(createCell("STT", baseFont, Font.BOLD));
            table.addCell(createCell("Tên sản phẩm", baseFont, Font.BOLD));
            table.addCell(createCell("Số lượng", baseFont, Font.BOLD));
            table.addCell(createCell("Đơn giá", baseFont, Font.BOLD));
            table.addCell(createCell("Thành tiền", baseFont, Font.BOLD));

            // Tổng tiền
            double totalPrice = 0;

            for (int i = 0; i < model.getRowCount(); i++) {
table.addCell(createCell(String.valueOf(i + 1), baseFont, Font.NORMAL));
                table.addCell(createCell(model.getValueAt(i, 3).toString(), baseFont, Font.NORMAL)); // Tên sản phẩm
                table.addCell(createCell(model.getValueAt(i, 5).toString(), baseFont, Font.NORMAL)); // Số lượng
                table.addCell(createCell(model.getValueAt(i, 6).toString(), baseFont, Font.NORMAL)); // Đơn giá

                int quantity = Integer.parseInt(model.getValueAt(i, 5).toString());
                double unitPrice = Double.parseDouble(model.getValueAt(i, 6).toString());
                double total = quantity * unitPrice;
                totalPrice += total;

                table.addCell(createCell(String.format("%.2f", total), baseFont, Font.NORMAL));
            }

            document.add(table);

            // Tổng kết
            document.add(new Paragraph("Tổng tiền: " + String.format("%.2f", totalPrice) + " VNĐ", font));
            if (discountPercentage > 0) {
                double discountedTotal = totalPrice - (totalPrice * discountPercentage / 100);
                document.add(new Paragraph("Giảm giá: " + discountPercentage + "%", font));
                document.add(new Paragraph("Tổng tiền sau giảm giá: " + String.format("%.2f", discountedTotal) + " VNĐ", font));
            }

            document.close();

            File pdfFile = new File(fileName);
            if (pdfFile.exists()) {
                Desktop.getDesktop().open(pdfFile);
            }

            JOptionPane.showMessageDialog(this, "Hóa đơn đã được xuất thành công dưới dạng PDF: " + fileName);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xuất hóa đơn: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private PdfPCell createCell(String text, BaseFont baseFont, int style) {
        Font cellFont = new Font(baseFont, 12);
        cellFont.setStyle(style);
        PdfPCell cell = new PdfPCell(new Phrase(text, cellFont));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        return cell;
    }

// Tính tổng tiền có giảm giá
    private void calculateTotalPrice() {
        totalPrice = 0.0;
        for (int i = 0; i < tblThanhToan.getRowCount(); i++) {
            Object soluong = tblThanhToan.getValueAt(i, 5);
            Object dongia = tblThanhToan.getValueAt(i, 6);
            if (soluong != null && dongia != null) {
                try {
                    int sl = Integer.parseInt(soluong.toString());
                    double dg = Double.parseDouble(dongia.toString());
                    double tt = sl * dg;
                    totalPrice += tt;
                } catch (NumberFormatException e) {
                    System.err.println("Lỗi tính tổng tiền tại dòng " + i + ": " + e.getMessage());
                }
            }
        }
        updateTotalPriceWithDiscount();
    }

// Áp dụng giảm giá (nếu có)
    private void updateTotalPriceWithDiscount() {
        double discounted = totalPrice;
        if (discountPercentage > 0) {
            discounted = totalPrice - (totalPrice * discountPercentage / 100);
        }
        txtTongTien.setText(String.format("%.1f VNĐ", discounted));
    }

// Xóa 1 dòng được chọn
    private void delete() {
        int row = tblThanhToan.getSelectedRow();
        if (row >= 0) {
            String soHD = tblThanhToan.getValueAt(row, 0).toString();
            ThanhToan cthd = dao.selectBySoHD(soHD);
            if (cthd != null) {
                dao.delete(cthd.getId());
                fillTableSLSP();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa!");
        }
    }

// Sửa 1 dòng
    private void update() {
        int row = tblThanhToan.getSelectedRow();
        if (row >= 0) {
            String soHD = tblThanhToan.getValueAt(row, 0).toString();
            String maSP = tblThanhToan.getValueAt(row, 2).toString();
            int soLuong = (int) tblThanhToan.getValueAt(row, 5);

            ThanhToan cthd = dao.selectBySoHD(soHD);
            if (cthd != null) {
                cthd.setSoHD(soHD);
                cthd.setMaSP(maSP);
                cthd.setSoLuong(soLuong);
                dao.update(cthd);
                fillTableSLSP();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để sửa!");
        }
    }

// Lọc bảng theo Mã KH
    private void filterTableByMaKH() {
        String selected = (String) cboDSKhachHang.getSelectedItem();
        if (selected == null || selected.isEmpty()) {
            fillTableSLSP();
            return;
        }

        String maKH = selected.split("-")[0].trim();
        DefaultTableModel model = (DefaultTableModel) tblThanhToan.getModel();
        model.setRowCount(0);

        List<Object[]> list = dao.getBysoHD(maKH, txtSoHD.getText().trim());
        for (Object[] row : list) {
            model.addRow(row);
        }

        calculateTotalPrice();
    }

// Điểm tích lũy
    private int calculatePoints(double total) {
        return (int) (total / 100000) * 10;
    }

// Xóa tất cả HĐ theo mã KH
    public void deleteByMaKH(String maKH) {
        String sql = "DELETE FROM HoaDon WHERE MaKhachHang = ?";
        XJdbc.update(sql, maKH);
    }

// Đổ combo khách hàng
    void fillComboBoxNamSLSP() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboDSKhachHang.getModel();
        model.removeAllElements();

        List<String> list = dao.selectYears();
        for (String maKH : list) {
            model.addElement(maKH);
        }
    }
}
