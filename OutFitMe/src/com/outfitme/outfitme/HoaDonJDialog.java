/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.outfitme.outfitme;

import com.outfitme.dao.HoaDonDAO;
import com.outfitme.dao.KhachHangDAO;
import com.outfitme.dao.NhanVienDAO;
import com.outfitme.dao.SanPhamDAO;
import com.outfitme.entity.HoaDon;
import com.outfitme.entity.KhachHang;
import com.outfitme.entity.NhanVien;
import com.outfitme.entity.SanPham;
import com.outfitme.utils.MsgBox;
import com.outfitme.utils.XJdbc;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class HoaDonJDialog extends javax.swing.JDialog {

    /**
     * Creates new form QLHoaDonChiTiet
     */
    public HoaDonJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHoaDon = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblSoHD = new javax.swing.JLabel();
        txtSoHD = new javax.swing.JTextField();
        lblMaSP = new javax.swing.JLabel();
        lblNgayLapHD = new javax.swing.JLabel();
        txtNgayLapHD = new javax.swing.JTextField();
        lblMaNV = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        lblMaKH = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        cboMaSP = new javax.swing.JComboBox<>();
        cboMaKH = new javax.swing.JComboBox<>();
        cboMaNV = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtTenSanPham = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        btnSetDate = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnChiTietHoaDon = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OutFitMe - Hóa Đơn");

        lblHoaDon.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblHoaDon.setForeground(new java.awt.Color(51, 102, 255));
        lblHoaDon.setText("Hóa đơn");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()), "Thông tin hóa đơn"));

        lblSoHD.setText("Số hóa đơn");

        lblMaSP.setText("Mã sản phẩm");

        lblNgayLapHD.setText("Ngày lập HD");

        txtNgayLapHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgayLapHDActionPerformed(evt);
            }
        });

        lblMaNV.setText("Mã nhân viên");

        btnAdd.setText("Add vào cthd");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        lblMaKH.setText("Mã khách hàng");

        jLabel1.setText("Số lượng");

        jLabel3.setText("Tên sản phẩm");

        txtTenSanPham.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSoHD, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaSP))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSoHD)
                            .addComponent(cboMaSP, 0, 167, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(lblNgayLapHD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNgayLapHD, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMaKH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTenSanPham)
                            .addComponent(cboMaKH, 0, 166, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnMoi))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblMaNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSoLuong)
                                    .addComponent(cboMaNV, 0, 156, Short.MAX_VALUE))))))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSoHD)
                    .addComponent(txtSoHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNgayLapHD)
                    .addComponent(txtNgayLapHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaSP)
                    .addComponent(lblMaNV)
                    .addComponent(cboMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtTenSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnMoi)
                            .addComponent(btnAdd))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaKH)
                            .addComponent(cboMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()), "Bảng hóa đơn\n"));

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Số hóa đơn", "Ngày lập HD", "Mã sản phẩm", "Tên sản phẩm", "Mã nhân viên", "Mã khách hàng", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHoaDon);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSetDate.setText("Set Date");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel2.setText("Tìm kiếm Số hóa đơn");

        btnChiTietHoaDon.setText("Chi Tiết hóa đơn");
        btnChiTietHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietHoaDonActionPerformed(evt);
            }
        });

        btnThem.setText("Thêm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSetDate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(281, 281, 281)
                                        .addComponent(lblHoaDon)))
                                .addGap(0, 6, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnChiTietHoaDon)
                                .addGap(18, 18, 18)
                                .addComponent(btnThem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblHoaDon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnSetDate)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnChiTietHoaDon)
                    .addComponent(btnThem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNgayLapHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgayLapHDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayLapHDActionPerformed

    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tblHoaDonMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnChiTietHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietHoaDonActionPerformed
        ChiTietHoaDonJDialog chiTietDialog = new ChiTietHoaDonJDialog(new javax.swing.JFrame(), true);
        chiTietDialog.setLocationRelativeTo(this);
        chiTietDialog.setVisible(true);
    }//GEN-LAST:event_btnChiTietHoaDonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HoaDonJDialog dialog = new HoaDonJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChiTietHoaDon;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSetDate;
    private javax.swing.JButton btnThem;
    private javax.swing.JComboBox<String> cboMaKH;
    private javax.swing.JComboBox<String> cboMaNV;
    private javax.swing.JComboBox<String> cboMaSP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHoaDon;
    private javax.swing.JLabel lblMaKH;
    private javax.swing.JLabel lblMaNV;
    private javax.swing.JLabel lblMaSP;
    private javax.swing.JLabel lblNgayLapHD;
    private javax.swing.JLabel lblSoHD;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTextField txtNgayLapHD;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSoHD;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTenSanPham;
    // End of variables declaration//GEN-END:variables

    HoaDonDAO hddao = new HoaDonDAO();
    KhachHangDAO khdao = new KhachHangDAO();
    NhanVienDAO nvdao = new NhanVienDAO();
    SanPhamDAO spdao = new SanPhamDAO();
    int row = -1;

    void init() {
        setLocationRelativeTo(null);
        // Tắt editable cho txtSoHD vì đã tự động tăng trong SQL
        txtSoHD.setEditable(false);

        // Lấy số hóa đơn mới nhất từ cơ sở dữ liệu để hiển thị
        setNewSoHD();

        // Điền dữ liệu vào các JComboBox
        fillComboBoxMaSP();
        fillComboBoxMaNV();
        fillComboBoxMaKH();

        // Tải dữ liệu từ cơ sở dữ liệu lên bảng tblHoaDon
        fillTable();

        // Thêm sự kiện cho nút Set Date
        btnSetDate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setCurrentDate();
            }
        });

        // Thêm sự kiện cho cboMaSP để hiển thị tên sản phẩm
        cboMaSP.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Lấy mã sản phẩm được chọn
                String maSP = cboMaSP.getSelectedItem() != null ? cboMaSP.getSelectedItem().toString() : "";
                if (!maSP.isEmpty()) {
                    // Lấy thông tin sản phẩm từ SanPhamDAO
                    SanPham sp = spdao.selectById(maSP);
                    if (sp != null) {
                        // Hiển thị tên sản phẩm lên txtTenSanPham
                        txtTenSanPham.setText(sp.getTenSP());
                    } else {
                        txtTenSanPham.setText(""); // Nếu không tìm thấy sản phẩm, để trống
                    }
                } else {
                    txtTenSanPham.setText(""); // Nếu không chọn mã sản phẩm, để trống
                }
            }
        });

        cboMaNV.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Bỏ updateTable()
            }
        });

        cboMaKH.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Bỏ updateTable()
            }
        });

        // Thêm sự kiện cho txtSoLuong để cập nhật bảng khi nhập số lượng
        txtSoLuong.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                // Bỏ updateTable()
            }
        });

        // Thêm sự kiện cho nút Thêm
        btnThem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (validateForm()) {
                    // Thêm dữ liệu vào bảng tblHoaDon
                    DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
                    String soHD = txtSoHD.getText();
                    String ngayLap = txtNgayLapHD.getText();
                    String maSP = cboMaSP.getSelectedItem().toString();
                    String tenSP = txtTenSanPham.getText();
                    String maNV = cboMaNV.getSelectedItem().toString();
                    String maKH = cboMaKH.getSelectedItem().toString();
                    int soLuong = Integer.parseInt(txtSoLuong.getText());

                    // Thêm một dòng mới vào CUỐI bảng
                    model.addRow(new Object[]{soHD, ngayLap, maSP, tenSP, maNV, maKH, soLuong});

                    // Thêm hóa đơn vào cơ sở dữ liệu
                    insertHoaDon();

                    MsgBox.alert(HoaDonJDialog.this, "Thêm vào bảng thành công!");

                    // Làm mới form và cập nhật số hóa đơn mới
                    clearForm();
                    setNewSoHD();
                } else {
                    MsgBox.alert(HoaDonJDialog.this, "Thiếu dữ liệu, vui lòng kiểm tra lại!");
                }
            }
        });

        // Thêm sự kiện cho nút Mới
        btnMoi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearForm();
                setNewSoHD(); // Cập nhật số hóa đơn mới
                fillTable(); // Tải lại toàn bộ dữ liệu vào bảng
            }
        });

        // Thêm sự kiện cho nút Tìm
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchHoaDon();
            }
        });

        // Thêm sự kiện click đúp cho bảng tblHoaDon
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) { // Kiểm tra click đúp
                    int selectedRow = tblHoaDon.getSelectedRow();
                    if (selectedRow >= 0) {
                        // Lấy dữ liệu từ dòng được chọn
                        String soHD = tblHoaDon.getValueAt(selectedRow, 0).toString();
                        String ngayLap = tblHoaDon.getValueAt(selectedRow, 1).toString();
                        String maSP = tblHoaDon.getValueAt(selectedRow, 2).toString();
                        String tenSP = tblHoaDon.getValueAt(selectedRow, 3).toString();
                        String maNV = tblHoaDon.getValueAt(selectedRow, 4).toString();
                        String maKH = tblHoaDon.getValueAt(selectedRow, 5).toString();
                        String soLuong = tblHoaDon.getValueAt(selectedRow, 6).toString();

                        // Hiển thị dữ liệu lên form
                        txtSoHD.setText(soHD);
                        txtNgayLapHD.setText(ngayLap);
                        cboMaSP.setSelectedItem(maSP);
                        txtTenSanPham.setText(tenSP);
                        cboMaNV.setSelectedItem(maNV);
                        cboMaKH.setSelectedItem(maKH);
                        txtSoLuong.setText(soLuong);
                    }
                }
            }
        });
    }

// Lấy số hóa đơn mới nhất từ cơ sở dữ liệu
    private void setNewSoHD() {
        List<HoaDon> list = hddao.selectAll();
        if (!list.isEmpty()) {
            int lastSoHD = list.get(list.size() - 1).getSoHD();
            txtSoHD.setText(String.valueOf(lastSoHD + 1));
        } else {
            txtSoHD.setText("1"); // Nếu chưa có hóa đơn nào, bắt đầu từ 1
        }
    }

// Đặt ngày hiện tại vào txtNgayLapHD
    private void setCurrentDate() {
        Date today = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        txtNgayLapHD.setText(sdf.format(today));
    }

// Điền dữ liệu vào cboMaSP từ bảng SanPham
    private void fillComboBoxMaSP() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboMaSP.getModel();
        model.removeAllElements();
        try {
            List<SanPham> list = spdao.selectAll();
            for (SanPham sp : list) {
                model.addElement(sp.getMaSP());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// Điền dữ liệu vào cboMaNV từ bảng NhanVien
    private void fillComboBoxMaNV() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboMaNV.getModel();
        model.removeAllElements();
        try {
            List<NhanVien> list = nvdao.selectAll();
            for (NhanVien nv : list) {
                model.addElement(nv.getMaNV());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// Điền dữ liệu vào cboMaKH từ bảng KhachHang
    private void fillComboBoxMaKH() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboMaKH.getModel();
        model.removeAllElements();
        try {
            List<KhachHang> list = khdao.selectAll();
            for (KhachHang kh : list) {
                model.addElement(kh.getMaKH());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// Cập nhật dữ liệu vào bảng tblHoaDon
    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trong bảng

        String soHD = txtSoHD.getText();
        String ngayLap = txtNgayLapHD.getText();
        String maSP = cboMaSP.getSelectedItem() != null ? cboMaSP.getSelectedItem().toString() : "";
        String tenSP = txtTenSanPham.getText(); // Lấy tên sản phẩm từ txtTenSanPham
        String maNV = cboMaNV.getSelectedItem() != null ? cboMaNV.getSelectedItem().toString() : "";
        String maKH = cboMaKH.getSelectedItem() != null ? cboMaKH.getSelectedItem().toString() : "";
        String soLuong = txtSoLuong.getText();

        if (!ngayLap.isEmpty() && !maSP.isEmpty() && !maNV.isEmpty() && !maKH.isEmpty() && !soLuong.isEmpty()) {
            try {
                int soLuongInt = Integer.parseInt(soLuong);
                model.addRow(new Object[]{soHD, ngayLap, maSP, tenSP, maNV, maKH, soLuongInt});
            } catch (NumberFormatException e) {
                // Không thêm nếu số lượng không hợp lệ
            }
        }
    }

// Hàm validate để kiểm tra dữ liệu
    private boolean validateForm() {
        if (txtNgayLapHD.getText().isEmpty()) {
            return false;
        }
        if (cboMaSP.getSelectedItem() == null) {
            return false; // Kiểm tra MaSP
        }
        if (cboMaNV.getSelectedItem() == null) {
            return false;
        }
        if (cboMaKH.getSelectedItem() == null) {
            return false;
        }
        if (txtSoLuong.getText().isEmpty()) {
            return false;
        }
        try {
            int soLuong = Integer.parseInt(txtSoLuong.getText());
            if (soLuong <= 0) {
                return false;
            }
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

// Hàm thêm hóa đơn vào cơ sở dữ liệu
    private void insertHoaDon() {
        HoaDon hd = new HoaDon();
        hd.setNgayLap(java.sql.Date.valueOf(txtNgayLapHD.getText()));
        hd.setMaNV(cboMaNV.getSelectedItem().toString());
        hd.setMaKH(cboMaKH.getSelectedItem().toString());
        hd.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
        hd.setMaSP(cboMaSP.getSelectedItem().toString());
        hddao.insert(hd);

        // Sau khi thêm, lấy số hóa đơn mới nhất từ cơ sở dữ liệu
        setNewSoHD();
    }

// Hàm làm trắng form (nút Mới)
    private void clearForm() {
        cboMaSP.setSelectedIndex(-1);
        cboMaNV.setSelectedIndex(-1);
        cboMaKH.setSelectedIndex(-1);
        txtNgayLapHD.setText("");
        txtSoLuong.setText("");
        txtTenSanPham.setText("");
        txtSearch.setText("");
        // Không xóa dữ liệu trong bảng tblHoaDon
    }

// Hàm tìm hóa đơn theo SoHD (nút Tìm)
    private void searchHoaDon() {
        String soHD = txtSearch.getText().trim();
        if (soHD.isEmpty()) {
            MsgBox.alert(this, "Vui lòng nhập số hóa đơn để tìm!");
            return;
        }

        try {
            int soHDInt = Integer.parseInt(soHD);
            if (soHDInt <= 0) {
                MsgBox.alert(this, "Số hóa đơn phải là số dương!");
                return;
            }

            HoaDon hd = hddao.selectById(soHD);
            DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
            model.setRowCount(0); // Xóa dữ liệu cũ trong bảng

            if (hd != null) {
                // Lấy tên sản phẩm từ SanPhamDAO
                String tenSP = "";
                SanPham sp = spdao.selectById(hd.getMaSP());
                if (sp != null) {
                    tenSP = sp.getTenSP();
                }

                model.addRow(new Object[]{
                    hd.getSoHD(),
                    hd.getNgayLap(),
                    hd.getMaSP(),
                    tenSP, // Hiển thị tên sản phẩm
                    hd.getMaNV(),
                    hd.getMaKH(),
                    hd.getSoLuong()
                });
            } else {
                MsgBox.alert(this, "Không tìm thấy hóa đơn với số: " + soHD);
            }
        } catch (NumberFormatException e) {
            MsgBox.alert(this, "Số hóa đơn phải là một số hợp lệ!");
            DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
            model.setRowCount(0);
        }
    }

// Tải dữ liệu từ cơ sở dữ liệu lên bảng tblHoaDon
    private void fillTable() {
        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trong bảng

        try {
            List<HoaDon> list = hddao.selectAll();
            // Sắp xếp danh sách theo SoHD tăng dần
            Collections.sort(list, (HoaDon hd1, HoaDon hd2) -> Integer.compare(hd1.getSoHD(), hd2.getSoHD()));

            for (HoaDon hd : list) {
                // Lấy tên sản phẩm từ SanPhamDAO
                String tenSP = "";
                SanPham sp = spdao.selectById(hd.getMaSP());
                if (sp != null) {
                    tenSP = sp.getTenSP();
                }

                // Thêm vào cuối bảng
                model.addRow(new Object[]{
                    hd.getSoHD(),
                    hd.getNgayLap(),
                    hd.getMaSP(),
                    tenSP,
                    hd.getMaNV(),
                    hd.getMaKH(),
                    hd.getSoLuong()
                });
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi khi tải dữ liệu hóa đơn!");
            e.printStackTrace();
        }
    }
}
