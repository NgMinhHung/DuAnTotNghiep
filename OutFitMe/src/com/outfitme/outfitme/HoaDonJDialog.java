/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.outfitme.outfitme;

import com.outfitme.dao.HoaDonDAO;
import com.outfitme.dao.KhachHangDAO;
import com.outfitme.dao.NhanVienDAO;
import com.outfitme.dao.SanPhamDAO;
import com.outfitme.entity.HoaDon;
import com.outfitme.entity.KhachHang;
import com.outfitme.entity.NhanVien;
import com.outfitme.entity.SanPham;
import com.outfitme.utils.MsgBox;
import com.outfitme.utils.XJdbc;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Administrator
 */
public class HoaDonJDialog extends javax.swing.JDialog {

    /**
     * Creates new form QLHoaDonChiTiet
     */
    public HoaDonJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHoaDon = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblNgayLapHD = new javax.swing.JLabel();
        txtNgayLapHD = new javax.swing.JTextField();
        lblMaNV = new javax.swing.JLabel();
        lblMaKH = new javax.swing.JLabel();
        cboMaKH = new javax.swing.JComboBox<>();
        cboMaNV = new javax.swing.JComboBox<>();
        btnSetDate = new javax.swing.JButton();
        txtSoHoaDon = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        btnChiTietHoaDon = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblMaSP = new javax.swing.JLabel();
        cboMaSP = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtTenSanPham = new javax.swing.JTextField();
        txtSoLuong = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboSize = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OutFitMe - Hóa Đơn");

        lblHoaDon.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblHoaDon.setForeground(new java.awt.Color(51, 102, 255));
        lblHoaDon.setText("Hóa đơn");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()), "Thông tin hóa đơn"));

        lblId.setText("ID");

        lblNgayLapHD.setText("Ngày lập HD");

        txtNgayLapHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgayLapHDActionPerformed(evt);
            }
        });

        lblMaNV.setText("Mã nhân viên");

        lblMaKH.setText("Mã khách hàng");

        btnSetDate.setText("Set Date");

        jLabel5.setText("Số hóa đơn");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblId)
                            .addComponent(jLabel5))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSoHoaDon)
                            .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(lblNgayLapHD))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblMaKH)
                        .addGap(18, 18, 18)
                        .addComponent(cboMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMaNV)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNgayLapHD, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSetDate))
                    .addComponent(cboMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNgayLapHD)
                    .addComponent(txtNgayLapHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetDate))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaKH)
                    .addComponent(cboMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaNV)
                    .addComponent(cboMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()), "Bảng hóa đơn\n"));

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Size"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHoaDon);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/icon_find.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel2.setText("Tìm kiếm Số hóa đơn");

        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/them.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnChiTietHoaDon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/chitiethoadon.png"))); // NOI18N
        btnChiTietHoaDon.setText("Thanh Toán");
        btnChiTietHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietHoaDonActionPerformed(evt);
            }
        });

        btnMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/refesh.png"))); // NOI18N
        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/addVaoCTHD.png"))); // NOI18N
        btnAdd.setText("Tạo Hóa Đơn");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Sản phẩm"));

        lblMaSP.setText("Mã sản phẩm");

        jLabel3.setText("Tên sản phẩm");

        txtTenSanPham.setEditable(false);

        jLabel1.setText("Số lượng");

        jLabel4.setText("Size");

        cboSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "S", "M", "L", "XL" }));
        cboSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMaSP)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboMaSP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTenSanPham))
                .addGap(80, 80, 80)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSoLuong)
                    .addComponent(cboSize, 0, 120, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaSP)
                    .addComponent(cboMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTenSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cboSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/outfitme/icon/document-signed.png"))); // NOI18N
        jButton1.setText("Chi Tiết Hóa đơn");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHoaDon)
                .addGap(136, 136, 136)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnThem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(btnMoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChiTietHoaDon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHoaDon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(71, 71, 71)
                        .addComponent(btnAdd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnThem)
                        .addGap(90, 90, 90)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChiTietHoaDon)
                        .addGap(72, 72, 72))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblHoaDonMouseClicked

    private void txtNgayLapHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgayLapHDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayLapHDActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnChiTietHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietHoaDonActionPerformed
        ThanhToanJDialog thanhToanDialog = new ThanhToanJDialog(new javax.swing.JFrame(), true);
        thanhToanDialog.setLocationRelativeTo(this);
        thanhToanDialog.setVisible(true);
    }//GEN-LAST:event_btnChiTietHoaDonActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ChiTietHoaDonJDialog chiTietDialog = new ChiTietHoaDonJDialog(new javax.swing.JFrame(), true);
        chiTietDialog.setLocationRelativeTo(this);
        chiTietDialog.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cboSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSizeActionPerformed

    }//GEN-LAST:event_cboSizeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HoaDonJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HoaDonJDialog dialog = new HoaDonJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChiTietHoaDon;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSetDate;
    private javax.swing.JButton btnThem;
    private javax.swing.JComboBox<String> cboMaKH;
    private javax.swing.JComboBox<String> cboMaNV;
    private javax.swing.JComboBox<String> cboMaSP;
    private javax.swing.JComboBox<String> cboSize;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHoaDon;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblMaKH;
    private javax.swing.JLabel lblMaNV;
    private javax.swing.JLabel lblMaSP;
    private javax.swing.JLabel lblNgayLapHD;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNgayLapHD;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSoHoaDon;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTenSanPham;
    // End of variables declaration//GEN-END:variables

    HoaDonDAO hddao = new HoaDonDAO();
    KhachHangDAO khdao = new KhachHangDAO();
    NhanVienDAO nvdao = new NhanVienDAO();
    SanPhamDAO spdao = new SanPhamDAO();
    int row = -1;

    void init() {
        setLocationRelativeTo(null);
        // Tắt editable cho txtSoHD vì đã tự động tăng
        txtId.setEditable(false);
        setNewSoHD();
        fillComboBoxMaSP();
        fillComboBoxMaNV();
        fillComboBoxMaKH();

        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0);

        // Thêm sự kiện cho nút Set Date
        btnSetDate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setCurrentDate();
            }
        });

        // Thêm sự kiện cho cboMaSP để hiển thị tên sản phẩm
        cboMaSP.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Lấy mã sản phẩm được chọn
                String maSP = cboMaSP.getSelectedItem() != null ? cboMaSP.getSelectedItem().toString() : "";
                if (!maSP.isEmpty()) {
                    // Lấy thông tin sản phẩm từ SanPhamDAO
                    SanPham sp = spdao.selectById(maSP);
                    if (sp != null) {
                        // Hiển thị tên sản phẩm lên txtTenSanPham
                        txtTenSanPham.setText(sp.getTenSP());
                    } else {
                        txtTenSanPham.setText("");
                    }
                } else {
                    txtTenSanPham.setText("");
                }
            }
        });

        cboMaNV.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            }
        });

        cboMaKH.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            }
        });

        // Thêm sự kiện cho txtSoLuong để cập nhật bảng khi nhập số lượng
        txtSoLuong.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
            }
        });

        // Thêm sự kiện cho nút Thêm
        btnThem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (validateForm()) {
                    // Thêm dữ liệu vào bảng tblHoaDon
                    DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
                    String Id = txtId.getText();
                    String maSP = cboMaSP.getSelectedItem().toString();
                    String tenSP = txtTenSanPham.getText();
                    String size = cboSize.getSelectedItem().toString();
                    int soLuong = Integer.parseInt(txtSoLuong.getText());
                    
                    model.addRow(new Object[]{Id, maSP, tenSP, soLuong, size});
                    MsgBox.alert(HoaDonJDialog.this, "Thêm vào bảng thành công!");
                    clearFormKoClearTblHoaDon();
                    setNewSoHD();
                } else {
                    MsgBox.alert(HoaDonJDialog.this, "Thiếu dữ liệu, vui lòng kiểm tra lại!");
                }
            }
        });

        // Thêm sự kiện cho nút Add vào thanh toán
        btnAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
                int rowCount = model.getRowCount();
                if (rowCount == 0) {
                    MsgBox.alert(HoaDonJDialog.this, "Bảng hóa đơn trống, không có dữ liệu để lưu!");
                    return;
                }

                // Lấy thông tin từ các ô nhập liệu
                String soHD = txtSoHoaDon.getText().trim();
                String maKH = cboMaKH.getSelectedItem() != null ? cboMaKH.getSelectedItem().toString() : "";
                String ngayLap = txtNgayLapHD.getText().trim();
                String maNV = cboMaNV.getSelectedItem() != null ? cboMaNV.getSelectedItem().toString() : "";

                // Kiểm tra dữ liệu nhập liệu
                if (soHD.isEmpty() || maKH.isEmpty() || ngayLap.isEmpty() || maNV.isEmpty()) {
                    MsgBox.alert(HoaDonJDialog.this, "Vui lòng điền đầy đủ thông tin hóa đơn (Số hóa đơn, Mã khách hàng, Ngày lập HD, Mã nhân viên)!");
                    return;
                }

                try {
                    // Duyệt qua từng dòng trong bảng tblHoaDon
                    for (int i = 0; i < rowCount; i++) {
                        String maSP = model.getValueAt(i, 1).toString();    
                        String tenSP = model.getValueAt(i, 2).toString();   
                        String soLuongText = model.getValueAt(i, 3).toString(); 
                        String size = model.getValueAt(i, 4).toString();    
                        int soLuong = Integer.parseInt(soLuongText);

                        // Tạo đối tượng HoaDon và lưu vào cơ sở dữ liệu
                        HoaDon hd = new HoaDon();
                        hd.setSoHD(soHD);
                        hd.setNgayLap(new java.sql.Date(new SimpleDateFormat("yyyy-MM-dd").parse(ngayLap).getTime()));
                        hd.setMaNV(maNV);
                        hd.setMaKH(maKH);
                        hd.setSoLuong(soLuong);
                        hd.setMaSP(maSP);
                        hd.setSize(size);
                        hddao.insert(hd);
                    }
                    MsgBox.alert(HoaDonJDialog.this, "Lưu hóa đơn vào cơ sở dữ liệu thành công!");

                    // Xóa dữ liệu tạm trong bảng tblHoaDon
                    model.setRowCount(0);

                    // Cập nhật số hóa đơn mới
                    setNewSoHD();
                    clearForm();
                } catch (ParseException ex) {
                    MsgBox.alert(HoaDonJDialog.this, "Ngày lập hóa đơn không đúng định dạng (yyyy-MM-dd)!");
                    ex.printStackTrace();
                } catch (Exception ex) {
                    MsgBox.alert(HoaDonJDialog.this, "Lỗi khi lưu hóa đơn vào cơ sở dữ liệu: " + ex.getMessage());
                    ex.printStackTrace();
                }
            }
        });

        // Thêm sự kiện cho nút Mới
        btnMoi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearForm(); 
                setNewSoHD();

            }
        });

        // Thêm sự kiện cho nút Tìm
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchHoaDon();
            }
        });

        // Thêm sự kiện click đúp cho bảng tblHoaDon
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) { 
                    int selectedRow = tblHoaDon.getSelectedRow();
                    if (selectedRow >= 0) {
                        
                        // Lấy dữ liệu từ dòng được chọn
                        String id = tblHoaDon.getValueAt(selectedRow, 0).toString();
                        String SoHD = tblHoaDon.getValueAt(selectedRow, 1).toString();
                        String ngayLap = tblHoaDon.getValueAt(selectedRow, 2).toString();
                        String maSP = tblHoaDon.getValueAt(selectedRow, 3).toString();
                        String tenSP = tblHoaDon.getValueAt(selectedRow, 4).toString();
                        String maNV = tblHoaDon.getValueAt(selectedRow, 5).toString();
                        String maKH = tblHoaDon.getValueAt(selectedRow, 6).toString();
                        String soLuong = tblHoaDon.getValueAt(selectedRow, 7).toString();
                        String size = tblHoaDon.getValueAt(selectedRow, 8).toString();

                        // Hiển thị dữ liệu lên form
                        txtId.setText(id);
                        txtSoHoaDon.setText(SoHD);
                        txtNgayLapHD.setText(ngayLap);
                        cboMaSP.setSelectedItem(maSP);
                        txtTenSanPham.setText(tenSP);
                        cboMaNV.setSelectedItem(maNV);
                        cboMaKH.setSelectedItem(maKH);
                        txtSoLuong.setText(soLuong);
                        cboSize.setSelectedItem(size);
                    }
                }
            }
        });
    }
// Lấy số hóa đơn mới nhất từ cơ sở dữ liệu
    private void setNewSoHD() {
        List<HoaDon> list = hddao.selectAll();
        if (!list.isEmpty()) {
            int lastSoHD = list.get(list.size() - 1).getId();
            txtId.setText(String.valueOf(lastSoHD + 1));
        } else {
            txtId.setText("1");
        }
    }

// Đặt ngày hiện tại vào txtNgayLapHD
    private void setCurrentDate() {
        Date today = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        txtNgayLapHD.setText(sdf.format(today));
    }

// Điền dữ liệu vào cboMaSP từ bảng SanPham
    private void fillComboBoxMaSP() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboMaSP.getModel();
        model.removeAllElements();
        try {
            List<SanPham> list = spdao.selectAll();
            for (SanPham sp : list) {
                model.addElement(sp.getMaSP());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// Điền dữ liệu vào cboMaNV từ bảng NhanVien
    private void fillComboBoxMaNV() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboMaNV.getModel();
        model.removeAllElements();
        try {
            List<NhanVien> list = nvdao.selectAll();
            for (NhanVien nv : list) {
                model.addElement(nv.getMaNV());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// Điền dữ liệu vào cboMaKH từ bảng KhachHang
    private void fillComboBoxMaKH() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboMaKH.getModel();
        model.removeAllElements();
        try {
            List<KhachHang> list = khdao.selectAll();
            for (KhachHang kh : list) {
                model.addElement(kh.getMaKH());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

// Cập nhật dữ liệu vào bảng tblHoaDon
    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0); 

        String Id = txtId.getText();
        String SoHD = txtSoHoaDon.getText();
        String ngayLap = txtNgayLapHD.getText();
        String maSP = cboMaSP.getSelectedItem() != null ? cboMaSP.getSelectedItem().toString() : "";
        String tenSP = txtTenSanPham.getText(); 
        String maNV = cboMaNV.getSelectedItem() != null ? cboMaNV.getSelectedItem().toString() : "";
        String maKH = cboMaKH.getSelectedItem() != null ? cboMaKH.getSelectedItem().toString() : "";
        String soLuong = txtSoLuong.getText();

        if (!ngayLap.isEmpty() && !maSP.isEmpty() && !maNV.isEmpty() && !maKH.isEmpty() && !soLuong.isEmpty()) {
            try {
                int soLuongInt = Integer.parseInt(soLuong);
                model.addRow(new Object[]{Id, SoHD, ngayLap, maSP, tenSP, maNV, maKH, soLuongInt});
            } catch (NumberFormatException e) {
            }
        }
    }

// Hàm validate để kiểm tra dữ liệu
    private boolean validateForm() {
        if (txtNgayLapHD.getText().isEmpty()) {
            return false;
        }
        if (cboMaSP.getSelectedItem() == null) {
            return false; 
        }
        if (cboMaNV.getSelectedItem() == null) {
            return false;
        }
        if (cboMaKH.getSelectedItem() == null) {
            return false;
        }
        if (txtSoLuong.getText().isEmpty()) {
            return false;
        }
        try {
            int soLuong = Integer.parseInt(txtSoLuong.getText());
            if (soLuong <= 0) {
                return false;
            }
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    private void clearForm() {
        cboMaSP.setSelectedIndex(-1);
        cboMaNV.setSelectedIndex(-1);
        txtSoHoaDon.setText("");
        cboMaKH.setSelectedIndex(-1);
        txtNgayLapHD.setText("");
        txtSoLuong.setText("");
        txtTenSanPham.setText("");
        txtSearch.setText("");

        // Xóa dữ liệu trong bảng tblHoaDon
        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0);
    }

// Hàm tìm hóa đơn theo SoHD (nút Tìm)
    private void searchHoaDon() {
        String soHD = txtSearch.getText().trim();
        if (soHD.isEmpty()) {
            MsgBox.alert(this, "Vui lòng nhập số hóa đơn để tìm!");
            return;
        }

        try {
            List<HoaDon> list = hddao.selectBySoHD(soHD);
            DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
            model.setRowCount(0);

            if (!list.isEmpty()) {
                for (HoaDon hd : list) {
                    String tenSP = "";
                    SanPham sp = spdao.selectById(hd.getMaSP());
                    if (sp != null) {
                        tenSP = sp.getTenSP();
                    }
                    model.addRow(new Object[]{
                        hd.getId(),
                        hd.getSoHD(),
                        hd.getNgayLap(),
                        hd.getMaSP(),
                        tenSP,
                        hd.getMaNV(),
                        hd.getMaKH(),
                        hd.getSoLuong(),
                        hd.getSize()
                    });
                }
            } else {
                MsgBox.alert(this, "Không tìm thấy hóa đơn với số: " + soHD);
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi khi tìm hóa đơn: " + e.getMessage());
            DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
            model.setRowCount(0);
        }
    }

// Tải dữ liệu từ cơ sở dữ liệu lên bảng tblHoaDon
    private void fillTable() {
        DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
        model.setRowCount(0);

        try {
            List<HoaDon> list = hddao.selectAll();
            Collections.sort(list, (HoaDon hd1, HoaDon hd2) -> Integer.compare(hd1.getId(), hd2.getId()));

            for (HoaDon hd : list) {
                String tenSP = "";
                SanPham sp = spdao.selectById(hd.getMaSP());
                if (sp != null) {
                    tenSP = sp.getTenSP();
                }
                model.addRow(new Object[]{
                    hd.getId(), 
                    hd.getSoHD(), 
                    hd.getNgayLap(),
                    hd.getMaSP(),
                    tenSP,
                    hd.getMaNV(),
                    hd.getMaKH(),
                    hd.getSoLuong(),
                    hd.getSize()
                });
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi khi tải dữ liệu hóa đơn: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Hàm làm trắng form (nút Mới)
    private void clearFormKoClearTblHoaDon() {
        cboMaSP.setSelectedIndex(-1);
        txtSoLuong.setText("");
        txtTenSanPham.setText("");
        txtSearch.setText("");
    }
}
